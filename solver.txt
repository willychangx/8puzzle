Test 1: moves()
* puzzle00.txt
Minimum number of moves = 0
* puzzle01.txt
Minimum number of moves = 1
* puzzle02.txt
Minimum number of moves = 2
* puzzle03.txt
Minimum number of moves = 3
* puzzle04.txt
Minimum number of moves = 4
* puzzle05.txt
Minimum number of moves = 5
* puzzle06.txt
Minimum number of moves = 6
* puzzle07.txt
Minimum number of moves = 7
* puzzle08.txt
Minimum number of moves = 8
* puzzle09.txt
Minimum number of moves = 9
* puzzle10.txt
Minimum number of moves = 10
* puzzle11.txt
Minimum number of moves = 11
* puzzle12.txt
Minimum number of moves = 12
* puzzle13.txt
Minimum number of moves = 13
---
Test 2: solution()
* puzzle00.txt
10
 1	 2	 3	 4	 5	 6	 7	 8	 9	10	
11	12	13	14	15	16	17	18	19	20	
21	22	23	24	25	26	27	28	29	30	
31	32	33	34	35	36	37	38	39	40	
41	42	43	44	45	46	47	48	49	50	
51	52	53	54	55	56	57	58	59	60	
61	62	63	64	65	66	67	68	69	70	
71	72	73	74	75	76	77	78	79	80	
81	82	83	84	85	86	87	88	89	90	
91	92	93	94	95	96	97	98	99	 0	

* puzzle01.txt
2
 1	 0	
 3	 2	

2
 1	 2	
 3	 0	

* puzzle02.txt
9
 1	 2	 3	 4	 5	 6	 7	 8	 9	
10	11	12	13	14	15	16	17	18	
19	20	21	22	23	24	25	26	27	
28	29	30	31	32	33	34	35	36	
37	38	39	40	41	42	43	44	45	
46	47	48	49	50	51	52	53	54	
55	56	57	58	59	60	61	62	63	
64	65	66	67	68	69	70	 0	71	
73	74	75	76	77	78	79	80	72	

9
 1	 2	 3	 4	 5	 6	 7	 8	 9	
10	11	12	13	14	15	16	17	18	
19	20	21	22	23	24	25	26	27	
28	29	30	31	32	33	34	35	36	
37	38	39	40	41	42	43	44	45	
46	47	48	49	50	51	52	53	54	
55	56	57	58	59	60	61	62	63	
64	65	66	67	68	69	70	71	 0	
73	74	75	76	77	78	79	80	72	

9
 1	 2	 3	 4	 5	 6	 7	 8	 9	
10	11	12	13	14	15	16	17	18	
19	20	21	22	23	24	25	26	27	
28	29	30	31	32	33	34	35	36	
37	38	39	40	41	42	43	44	45	
46	47	48	49	50	51	52	53	54	
55	56	57	58	59	60	61	62	63	
64	65	66	67	68	69	70	71	72	
73	74	75	76	77	78	79	80	 0	

* puzzle03.txt
2
 2	 0	
 1	 3	

2
 0	 2	
 1	 3	

2
 1	 2	
 0	 3	

2
 1	 2	
 3	 0	

* puzzle04.txt
3
 0	 1	 3	
 4	 2	 5	
 7	 8	 6	

3
 1	 0	 3	
 4	 2	 5	
 7	 8	 6	

3
 1	 2	 3	
 4	 0	 5	
 7	 8	 6	

3
 1	 2	 3	
 4	 5	 0	
 7	 8	 6	

3
 1	 2	 3	
 4	 5	 6	
 7	 8	 0	

* puzzle05.txt
3
 4	 1	 3	
 0	 2	 6	
 7	 5	 8	

3
 0	 1	 3	
 4	 2	 6	
 7	 5	 8	

3
 1	 0	 3	
 4	 2	 6	
 7	 5	 8	

3
 1	 2	 3	
 4	 0	 6	
 7	 5	 8	

3
 1	 2	 3	
 4	 5	 6	
 7	 0	 8	

3
 1	 2	 3	
 4	 5	 6	
 7	 8	 0	

* puzzle06.txt
4
 0	 1	 2	 3	
 5	 6	 7	 4	
 9	10	11	 8	
13	14	15	12	

4
 1	 0	 2	 3	
 5	 6	 7	 4	
 9	10	11	 8	
13	14	15	12	

4
 1	 2	 0	 3	
 5	 6	 7	 4	
 9	10	11	 8	
13	14	15	12	

4
 1	 2	 3	 0	
 5	 6	 7	 4	
 9	10	11	 8	
13	14	15	12	

4
 1	 2	 3	 4	
 5	 6	 7	 0	
 9	10	11	 8	
13	14	15	12	

4
 1	 2	 3	 4	
 5	 6	 7	 8	
 9	10	11	 0	
13	14	15	12	

4
 1	 2	 3	 4	
 5	 6	 7	 8	
 9	10	11	12	
13	14	15	 0	

* puzzle07.txt
3
 1	 2	 3	
 0	 7	 6	
 5	 4	 8	

3
 1	 2	 3	
 5	 7	 6	
 0	 4	 8	

3
 1	 2	 3	
 5	 7	 6	
 4	 0	 8	

3
 1	 2	 3	
 5	 0	 6	
 4	 7	 8	

3
 1	 2	 3	
 0	 5	 6	
 4	 7	 8	

3
 1	 2	 3	
 4	 5	 6	
 0	 7	 8	

3
 1	 2	 3	
 4	 5	 6	
 7	 0	 8	

3
 1	 2	 3	
 4	 5	 6	
 7	 8	 0	

* puzzle08.txt
3
 2	 3	 5	
 1	 0	 4	
 7	 8	 6	

3
 2	 3	 5	
 1	 4	 0	
 7	 8	 6	

3
 2	 3	 0	
 1	 4	 5	
 7	 8	 6	

3
 2	 0	 3	
 1	 4	 5	
 7	 8	 6	

3
 0	 2	 3	
 1	 4	 5	
 7	 8	 6	

3
 1	 2	 3	
 0	 4	 5	
 7	 8	 6	

3
 1	 2	 3	
 4	 0	 5	
 7	 8	 6	

3
 1	 2	 3	
 4	 5	 0	
 7	 8	 6	

3
 1	 2	 3	
 4	 5	 6	
 7	 8	 0	

* puzzle09.txt
4
 2	 0	 3	 4	
 1	10	 6	 8	
 5	 9	 7	12	
13	14	11	15	

4
 0	 2	 3	 4	
 1	10	 6	 8	
 5	 9	 7	12	
13	14	11	15	

4
 1	 2	 3	 4	
 0	10	 6	 8	
 5	 9	 7	12	
13	14	11	15	

4
 1	 2	 3	 4	
 5	10	 6	 8	
 0	 9	 7	12	
13	14	11	15	

4
 1	 2	 3	 4	
 5	10	 6	 8	
 9	 0	 7	12	
13	14	11	15	

4
 1	 2	 3	 4	
 5	 0	 6	 8	
 9	10	 7	12	
13	14	11	15	

4
 1	 2	 3	 4	
 5	 6	 0	 8	
 9	10	 7	12	
13	14	11	15	

4
 1	 2	 3	 4	
 5	 6	 7	 8	
 9	10	 0	12	
13	14	11	15	

4
 1	 2	 3	 4	
 5	 6	 7	 8	
 9	10	11	12	
13	14	 0	15	

4
 1	 2	 3	 4	
 5	 6	 7	 8	
 9	10	11	12	
13	14	15	 0	

* puzzle10.txt
9
 1	 2	 3	 4	 5	 6	 7	 8	 9	
10	11	12	13	14	15	16	17	18	
19	20	21	22	23	24	25	26	27	
28	29	30	31	32	33	34	35	36	
37	38	39	40	41	42	43	44	45	
46	47	48	49	50	51	52	53	54	
55	56	57	58	59	60	61	62	63	
64	 0	65	67	68	78	69	70	72	
73	74	66	75	76	77	79	71	80	

9
 1	 2	 3	 4	 5	 6	 7	 8	 9	
10	11	12	13	14	15	16	17	18	
19	20	21	22	23	24	25	26	27	
28	29	30	31	32	33	34	35	36	
37	38	39	40	41	42	43	44	45	
46	47	48	49	50	51	52	53	54	
55	56	57	58	59	60	61	62	63	
64	65	 0	67	68	78	69	70	72	
73	74	66	75	76	77	79	71	80	

9
 1	 2	 3	 4	 5	 6	 7	 8	 9	
10	11	12	13	14	15	16	17	18	
19	20	21	22	23	24	25	26	27	
28	29	30	31	32	33	34	35	36	
37	38	39	40	41	42	43	44	45	
46	47	48	49	50	51	52	53	54	
55	56	57	58	59	60	61	62	63	
64	65	66	67	68	78	69	70	72	
73	74	 0	75	76	77	79	71	80	

9
 1	 2	 3	 4	 5	 6	 7	 8	 9	
10	11	12	13	14	15	16	17	18	
19	20	21	22	23	24	25	26	27	
28	29	30	31	32	33	34	35	36	
37	38	39	40	41	42	43	44	45	
46	47	48	49	50	51	52	53	54	
55	56	57	58	59	60	61	62	63	
64	65	66	67	68	78	69	70	72	
73	74	75	 0	76	77	79	71	80	

9
 1	 2	 3	 4	 5	 6	 7	 8	 9	
10	11	12	13	14	15	16	17	18	
19	20	21	22	23	24	25	26	27	
28	29	30	31	32	33	34	35	36	
37	38	39	40	41	42	43	44	45	
46	47	48	49	50	51	52	53	54	
55	56	57	58	59	60	61	62	63	
64	65	66	67	68	78	69	70	72	
73	74	75	76	 0	77	79	71	80	

9
 1	 2	 3	 4	 5	 6	 7	 8	 9	
10	11	12	13	14	15	16	17	18	
19	20	21	22	23	24	25	26	27	
28	29	30	31	32	33	34	35	36	
37	38	39	40	41	42	43	44	45	
46	47	48	49	50	51	52	53	54	
55	56	57	58	59	60	61	62	63	
64	65	66	67	68	78	69	70	72	
73	74	75	76	77	 0	79	71	80	

9
 1	 2	 3	 4	 5	 6	 7	 8	 9	
10	11	12	13	14	15	16	17	18	
19	20	21	22	23	24	25	26	27	
28	29	30	31	32	33	34	35	36	
37	38	39	40	41	42	43	44	45	
46	47	48	49	50	51	52	53	54	
55	56	57	58	59	60	61	62	63	
64	65	66	67	68	 0	69	70	72	
73	74	75	76	77	78	79	71	80	

9
 1	 2	 3	 4	 5	 6	 7	 8	 9	
10	11	12	13	14	15	16	17	18	
19	20	21	22	23	24	25	26	27	
28	29	30	31	32	33	34	35	36	
37	38	39	40	41	42	43	44	45	
46	47	48	49	50	51	52	53	54	
55	56	57	58	59	60	61	62	63	
64	65	66	67	68	69	 0	70	72	
73	74	75	76	77	78	79	71	80	

9
 1	 2	 3	 4	 5	 6	 7	 8	 9	
10	11	12	13	14	15	16	17	18	
19	20	21	22	23	24	25	26	27	
28	29	30	31	32	33	34	35	36	
37	38	39	40	41	42	43	44	45	
46	47	48	49	50	51	52	53	54	
55	56	57	58	59	60	61	62	63	
64	65	66	67	68	69	70	 0	72	
73	74	75	76	77	78	79	71	80	

9
 1	 2	 3	 4	 5	 6	 7	 8	 9	
10	11	12	13	14	15	16	17	18	
19	20	21	22	23	24	25	26	27	
28	29	30	31	32	33	34	35	36	
37	38	39	40	41	42	43	44	45	
46	47	48	49	50	51	52	53	54	
55	56	57	58	59	60	61	62	63	
64	65	66	67	68	69	70	71	72	
73	74	75	76	77	78	79	 0	80	

9
 1	 2	 3	 4	 5	 6	 7	 8	 9	
10	11	12	13	14	15	16	17	18	
19	20	21	22	23	24	25	26	27	
28	29	30	31	32	33	34	35	36	
37	38	39	40	41	42	43	44	45	
46	47	48	49	50	51	52	53	54	
55	56	57	58	59	60	61	62	63	
64	65	66	67	68	69	70	71	72	
73	74	75	76	77	78	79	80	 0	

* puzzle11.txt
3
 1	 0	 2	
 7	 5	 4	
 8	 6	 3	

3
 1	 5	 2	
 7	 0	 4	
 8	 6	 3	

3
 1	 5	 2	
 7	 4	 0	
 8	 6	 3	

3
 1	 5	 2	
 7	 4	 3	
 8	 6	 0	

3
 1	 5	 2	
 7	 4	 3	
 8	 0	 6	

3
 1	 5	 2	
 7	 4	 3	
 0	 8	 6	

3
 1	 5	 2	
 0	 4	 3	
 7	 8	 6	

3
 1	 5	 2	
 4	 0	 3	
 7	 8	 6	

3
 1	 0	 2	
 4	 5	 3	
 7	 8	 6	

3
 1	 2	 0	
 4	 5	 3	
 7	 8	 6	

3
 1	 2	 3	
 4	 5	 0	
 7	 8	 6	

3
 1	 2	 3	
 4	 5	 6	
 7	 8	 0	

* puzzle12.txt
5
 1	 2	 3	 4	 5	
12	 6	 8	 9	10	
 0	 7	13	19	14	
11	16	17	18	15	
21	22	23	24	20	

5
 1	 2	 3	 4	 5	
 0	 6	 8	 9	10	
12	 7	13	19	14	
11	16	17	18	15	
21	22	23	24	20	

5
 1	 2	 3	 4	 5	
 6	 0	 8	 9	10	
12	 7	13	19	14	
11	16	17	18	15	
21	22	23	24	20	

5
 1	 2	 3	 4	 5	
 6	 7	 8	 9	10	
12	 0	13	19	14	
11	16	17	18	15	
21	22	23	24	20	

5
 1	 2	 3	 4	 5	
 6	 7	 8	 9	10	
 0	12	13	19	14	
11	16	17	18	15	
21	22	23	24	20	

5
 1	 2	 3	 4	 5	
 6	 7	 8	 9	10	
11	12	13	19	14	
 0	16	17	18	15	
21	22	23	24	20	

5
 1	 2	 3	 4	 5	
 6	 7	 8	 9	10	
11	12	13	19	14	
16	 0	17	18	15	
21	22	23	24	20	

5
 1	 2	 3	 4	 5	
 6	 7	 8	 9	10	
11	12	13	19	14	
16	17	 0	18	15	
21	22	23	24	20	

5
 1	 2	 3	 4	 5	
 6	 7	 8	 9	10	
11	12	13	19	14	
16	17	18	 0	15	
21	22	23	24	20	

5
 1	 2	 3	 4	 5	
 6	 7	 8	 9	10	
11	12	13	 0	14	
16	17	18	19	15	
21	22	23	24	20	

5
 1	 2	 3	 4	 5	
 6	 7	 8	 9	10	
11	12	13	14	 0	
16	17	18	19	15	
21	22	23	24	20	

5
 1	 2	 3	 4	 5	
 6	 7	 8	 9	10	
11	12	13	14	15	
16	17	18	19	 0	
21	22	23	24	20	

5
 1	 2	 3	 4	 5	
 6	 7	 8	 9	10	
11	12	13	14	15	
16	17	18	19	20	
21	22	23	24	 0	

* puzzle13.txt
4
 2	 3	 4	 8	
 1	 6	 0	12	
 5	10	 7	11	
 9	13	14	15	

4
 2	 3	 4	 8	
 1	 6	 7	12	
 5	10	 0	11	
 9	13	14	15	

4
 2	 3	 4	 8	
 1	 6	 7	12	
 5	10	11	 0	
 9	13	14	15	

4
 2	 3	 4	 8	
 1	 6	 7	 0	
 5	10	11	12	
 9	13	14	15	

4
 2	 3	 4	 0	
 1	 6	 7	 8	
 5	10	11	12	
 9	13	14	15	

4
 2	 3	 0	 4	
 1	 6	 7	 8	
 5	10	11	12	
 9	13	14	15	

4
 2	 0	 3	 4	
 1	 6	 7	 8	
 5	10	11	12	
 9	13	14	15	

4
 0	 2	 3	 4	
 1	 6	 7	 8	
 5	10	11	12	
 9	13	14	15	

4
 1	 2	 3	 4	
 0	 6	 7	 8	
 5	10	11	12	
 9	13	14	15	

4
 1	 2	 3	 4	
 5	 6	 7	 8	
 0	10	11	12	
 9	13	14	15	

4
 1	 2	 3	 4	
 5	 6	 7	 8	
 9	10	11	12	
 0	13	14	15	

4
 1	 2	 3	 4	
 5	 6	 7	 8	
 9	10	11	12	
13	 0	14	15	

4
 1	 2	 3	 4	
 5	 6	 7	 8	
 9	10	11	12	
13	14	 0	15	

4
 1	 2	 3	 4	
 5	 6	 7	 8	
 9	10	11	12	
13	14	15	 0	

---
Test 3: isSolvable()
* puzzle01.txt
isSolvable() = true
* puzzle03.txt
isSolvable() = true
* puzzle04.txt
isSolvable() = true
* puzzle17.txt
isSolvable() = true
* puzzle3x3-unsolvable1.txt
isSolvable() = false
* puzzle3x3-unsolvable2.txt
isSolvable() = false
* puzzle4x4-unsolvable.txt
isSolvable() = false
---
Test 4: Constructor Exceptions
Illegal argument in constructor.
---
Test 5: moves() w/ 2x2
* puzzle2x2-00.txt
moves() = 0
* puzzle2x2-01.txt
moves() = 1
* puzzle2x2-02.txt
moves() = 2
* puzzle2x2-03.txt
moves() = 3
* puzzle2x2-04.txt
moves() = 4
* puzzle2x2-05.txt
moves() = 5
* puzzle2x2-06.txt
moves() = 6
---
Test 6: solution() w/ 2x2
* puzzle2x2-00.txt
2
 1	 2	
 3	 0	

* puzzle2x2-01.txt
2
 1	 2	
 0	 3	

2
 1	 2	
 3	 0	

* puzzle2x2-02.txt
2
 0	 1	
 3	 2	

2
 1	 0	
 3	 2	

2
 1	 2	
 3	 0	

* puzzle2x2-03.txt
2
 3	 1	
 0	 2	

2
 0	 1	
 3	 2	

2
 1	 0	
 3	 2	

2
 1	 2	
 3	 0	

* puzzle2x2-04.txt
2
 2	 3	
 1	 0	

2
 2	 0	
 1	 3	

2
 0	 2	
 1	 3	

2
 1	 2	
 0	 3	

2
 1	 2	
 3	 0	

* puzzle2x2-05.txt
2
 2	 3	
 0	 1	

2
 2	 3	
 1	 0	

2
 2	 0	
 1	 3	

2
 0	 2	
 1	 3	

2
 1	 2	
 0	 3	

2
 1	 2	
 3	 0	

* puzzle2x2-06.txt
2
 0	 3	
 2	 1	

2
 2	 3	
 0	 1	

2
 2	 3	
 1	 0	

2
 2	 0	
 1	 3	

2
 0	 2	
 1	 3	

2
 1	 2	
 0	 3	

2
 1	 2	
 3	 0	

---
Test 7: moves() w/ 3x3
* puzzle3x3-00.txt
moves() = 0
* puzzle3x3-01.txt
moves() = 1
* puzzle3x3-02.txt
moves() = 2
* puzzle3x3-03.txt
moves() = 3
* puzzle3x3-04.txt
moves() = 4
* puzzle3x3-05.txt
moves() = 5
* puzzle3x3-06.txt
moves() = 6
* puzzle3x3-07.txt
moves() = 7
* puzzle3x3-08.txt
moves() = 8
* puzzle3x3-09.txt
moves() = 9
* puzzle3x3-10.txt
moves() = 10
---
Test 8: solution() w/ 3x3
* puzzle3x3-02.txt
3
 1	 2	 3	
 4	 0	 5	
 7	 8	 6	

3
 1	 2	 3	
 4	 5	 0	
 7	 8	 6	

3
 1	 2	 3	
 4	 5	 6	
 7	 8	 0	

* puzzle3x3-03.txt
3
 1	 2	 3	
 0	 4	 5	
 7	 8	 6	

3
 1	 2	 3	
 4	 0	 5	
 7	 8	 6	

3
 1	 2	 3	
 4	 5	 0	
 7	 8	 6	

3
 1	 2	 3	
 4	 5	 6	
 7	 8	 0	

* puzzle3x3-04.txt
3
 0	 1	 2	
 4	 5	 3	
 7	 8	 6	

3
 1	 0	 2	
 4	 5	 3	
 7	 8	 6	

3
 1	 2	 0	
 4	 5	 3	
 7	 8	 6	

3
 1	 2	 3	
 4	 5	 0	
 7	 8	 6	

3
 1	 2	 3	
 4	 5	 6	
 7	 8	 0	

* puzzle3x3-05.txt
3
 1	 0	 2	
 4	 6	 3	
 7	 5	 8	

3
 1	 2	 0	
 4	 6	 3	
 7	 5	 8	

3
 1	 2	 3	
 4	 6	 0	
 7	 5	 8	

3
 1	 2	 3	
 4	 0	 6	
 7	 5	 8	

3
 1	 2	 3	
 4	 5	 6	
 7	 0	 8	

3
 1	 2	 3	
 4	 5	 6	
 7	 8	 0	

* puzzle3x3-06.txt
3
 1	 2	 0	
 4	 8	 3	
 7	 6	 5	

3
 1	 2	 3	
 4	 8	 0	
 7	 6	 5	

3
 1	 2	 3	
 4	 8	 5	
 7	 6	 0	

3
 1	 2	 3	
 4	 8	 5	
 7	 0	 6	

3
 1	 2	 3	
 4	 0	 5	
 7	 8	 6	

3
 1	 2	 3	
 4	 5	 0	
 7	 8	 6	

3
 1	 2	 3	
 4	 5	 6	
 7	 8	 0	

* puzzle3x3-07.txt
3
 1	 2	 3	
 0	 4	 8	
 7	 6	 5	

3
 1	 2	 3	
 4	 0	 8	
 7	 6	 5	

3
 1	 2	 3	
 4	 6	 8	
 7	 0	 5	

3
 1	 2	 3	
 4	 6	 8	
 7	 5	 0	

3
 1	 2	 3	
 4	 6	 0	
 7	 5	 8	

3
 1	 2	 3	
 4	 0	 6	
 7	 5	 8	

3
 1	 2	 3	
 4	 5	 6	
 7	 0	 8	

3
 1	 2	 3	
 4	 5	 6	
 7	 8	 0	

* puzzle3x3-08.txt
3
 0	 4	 3	
 2	 1	 6	
 7	 5	 8	

3
 2	 4	 3	
 0	 1	 6	
 7	 5	 8	

3
 2	 4	 3	
 1	 0	 6	
 7	 5	 8	

3
 2	 0	 3	
 1	 4	 6	
 7	 5	 8	

3
 0	 2	 3	
 1	 4	 6	
 7	 5	 8	

3
 1	 2	 3	
 0	 4	 6	
 7	 5	 8	

3
 1	 2	 3	
 4	 0	 6	
 7	 5	 8	

3
 1	 2	 3	
 4	 5	 6	
 7	 0	 8	

3
 1	 2	 3	
 4	 5	 6	
 7	 8	 0	

* puzzle3x3-09.txt
3
 1	 3	 6	
 5	 2	 8	
 4	 0	 7	

3
 1	 3	 6	
 5	 2	 8	
 4	 7	 0	

3
 1	 3	 6	
 5	 2	 0	
 4	 7	 8	

3
 1	 3	 0	
 5	 2	 6	
 4	 7	 8	

3
 1	 0	 3	
 5	 2	 6	
 4	 7	 8	

3
 1	 2	 3	
 5	 0	 6	
 4	 7	 8	

3
 1	 2	 3	
 0	 5	 6	
 4	 7	 8	

3
 1	 2	 3	
 4	 5	 6	
 0	 7	 8	

3
 1	 2	 3	
 4	 5	 6	
 7	 0	 8	

3
 1	 2	 3	
 4	 5	 6	
 7	 8	 0	

* puzzle3x3-10.txt
3
 0	 4	 1	
 5	 3	 2	
 7	 8	 6	

3
 4	 0	 1	
 5	 3	 2	
 7	 8	 6	

3
 4	 1	 0	
 5	 3	 2	
 7	 8	 6	

3
 4	 1	 2	
 5	 3	 0	
 7	 8	 6	

3
 4	 1	 2	
 5	 0	 3	
 7	 8	 6	

3
 4	 1	 2	
 0	 5	 3	
 7	 8	 6	

3
 0	 1	 2	
 4	 5	 3	
 7	 8	 6	

3
 1	 0	 2	
 4	 5	 3	
 7	 8	 6	

3
 1	 2	 0	
 4	 5	 3	
 7	 8	 6	

3
 1	 2	 3	
 4	 5	 0	
 7	 8	 6	

3
 1	 2	 3	
 4	 5	 6	
 7	 8	 0	

---
Test 9: Timing
filename	moves	n	seconds
===============================================
puzzle41.txt	41	5	0.117
puzzle34.txt	34	4	0.35
puzzle37.txt	37	4	0.322
puzzle44.txt	44	5	0.542
puzzle32.txt	32	4	0.991
puzzle35.txt	35	4	0.932
puzzle33.txt	33	4	0.789
puzzle43.txt	43	4	1.66
puzzle46.txt	46	4	0.813
puzzle40.txt	40	4	1.005
puzzle36.txt	36	4	5.775
puzzle45.txt	45	4	4.343
---
Test 10: Method Counts
filename	Board()	equals()	manhattan()
===============================================
puzzle32.txt	875941	875933	591535
puzzle33.txt	770195	770189	521281
puzzle34.txt	375160	375156	253506
puzzle35.txt	773379	773371	518689
puzzle36.txt	5994905	5994897	4039315
puzzle37.txt	234645	234639	158435
puzzle39.txt	225752	225746	151600
puzzle40.txt	932854	932850	626284
puzzle41.txt	109832	109824	76890
puzzle43.txt	1641848	1641842	1103292
puzzle44.txt	449178	449170	311006
puzzle45.txt	4245999	4245993	2847861
puzzle46.txt	884966	884960	592692
